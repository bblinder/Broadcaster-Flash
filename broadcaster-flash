#!/bin/bash

## Automated script for SSHing into Livestream Broadcaster v1.

user_directory=$(pwd)

## For use in a later version.
#getKeyfile=$(curl path/to/ls-remote.pem)

flash_location=$(echo $0 | sed -e 's/broadcaster-flash//')

cd $flash_location && cp $flash_location/firmware_exec /tmp/

keyfile_check(){
	if [[ ! -f ~/.ssh/ls-remote.pem ]]
	then
		echo "SSH Keyfile Not found!"
	fi
}

netcat(){
	nc -G 7 $IP_address 22 < /dev/null &> /dev/null
	if [[ $? -ne 0 ]]; then
		echo "WARNING: Broadcaster not reachable via TCP 22!"
	fi
}

netcat_diffPort(){
	nc -G 7 $IP_address $newPort < /dev/null &> /dev/null
	if [[ $? -ne 0 ]] ; then
		echo "WARNING: Broadcaster not reachable via TCP $newPort !"
	fi
}

copy_firmware(){
	scp -i ~/.ssh/ls-remote.pem -o ConnectTimeout=20 /tmp/firmware_exec root@$IP_address:/tmp && echo "sh /tmp/firmware_exec" > /tmp/do_upgrade.txt && scp -i ~/.ssh/ls-remote.pem /tmp/do_upgrade.txt root@$IP_address:/tmp
}

copy_firmware_diffPort(){
	scp -i ~/.ssh/ls-remote.pem -o ConnectTimeout=20 -p $newPort /tmp/firmware_exec root@$IP_address:/tmp && echo "sh /tmp/firmware_exec" > /tmp/do_upgrade.txt && scp -i ~/.ssh/ls-remote.pem /tmp/do_upgrade.txt root@$IP_address:/tmp
}

ssh_to_unit(){
	ssh -i ~/.ssh/ls-remote.pem -o ConnectTimeout=20 root@$IP_address 'cat /tmp/do_upgrade.txt >> .profile' && ssh -i ~/.ssh/ls-remote.pem -o ConnectTimeout=20 root@$IP_address	
}

ssh_to_unit_diffPort(){
	ssh -i ~/.ssh/ls-remote.pem -o ConnectTimeout=20 -p $newPort root@$IP_address 'cat /tmp/do_upgrade.txt >> .profile' && ssh -i ~/.ssh/ls-remote.pem -o ConnectTimeout=20 root@$IP_address
}

## Now for the actual work
echo "********************************************************"
echo "Broadcaster v1 Reflash Tool!"
echo "Be sure to skim the README file if you run into trouble."
echo "********************************************************"
echo
echo "Please enter the public-facing IP address of the Broadcaster you'll be flashing :"
read IP_address
if [[ $IP_address == 192.168.* ]]
then
	echo "This is an internal IP address. The user needs to provide a public-facing address."
	echo "Would you still like to continue? [y/n]"
	read response
	if [[ $response == "y" ]] ; then
		echo "Attempting to connect via TCP 22..."
		keyfile_check
		netcat
		copy_firmware || { echo "Connection failed. You may need to attempt via another port." ; \
		echo "Enter Port, or press CTRL-C to cancel :" && read newPort ; if [[ $newPort -gt 0 ]] ; then \
		echo "Attempting through TCP $newPort" ; netcat_diffPort && copy_firmware_diffPort && ssh_to_unit_diffPort ; else exit 0 ; fi; } || { exit 1; }
		ssh_to_unit
		exit 0
	else
		exit 1
	fi
else
	echo "Attempting to connect via TCP 22..."
	keyfile_check
	netcat
	copy_firmware || { echo "Connection failed. You may need to attempt via another port." ;\
		echo "Enter Port, or press CTRL-C to cancel :" && read newPort ; if [[ $newPort -gt 0 ]] ; then \
		echo "Attempting through TCP $newPort" ; netcat_diffPort && copy_firmware_diffPort && ssh_to_unit_diffPort ; else exit 0 ; fi; } || { exit 1; }
	ssh_to_unit
fi

